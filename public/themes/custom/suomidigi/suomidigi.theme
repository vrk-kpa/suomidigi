<?php

/**
 * @file
 * Functions to support theming in the Suomidigi theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;
use Drupal\media\Entity\Media;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;
use Drupal\views\ViewExecutable;
use Drupal\views_infinite_scroll\Plugin\views\pager\InfiniteScroll;

/**
 * Implements hook_preprocess().
 */
function suomidigi_preprocess(&$variables) {
  $variables['icons_path'] = suomidigi_get_icons_path();
  $variables['current_language'] = Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();
  $variables['#attached']['drupalSettings']['iconsPath'] = $variables['icons_path'];
}

/**
 * Implements hook_preprocess_html() for HTML document templates.
 *
 * Create path to default theme for mobile icons (favicon, apple touch icon,
 * Android icons, ... defined in html tpl.
 *
 * {@inheritdoc}
 */
function suomidigi_preprocess_html(&$variables) {
  global $base_secure_url;
  $variables['theme_path'] = file_create_url($base_secure_url . '/' . drupal_get_path('theme', 'suomidigi'));
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Set site slogan and site name as variables for javascript templates.
 */
function suomidigi_preprocess_page(&$variables) {
  $site_config = Drupal::config('system.site');
  $settings = [
    'siteSlogan' => $site_config->get('slogan'),
    'siteName' => $site_config->get('name'),
  ];
  $variables['#attached']['drupalSettings'] = $settings;

  // Set entities as variables for templates.
  $variables['webform'] = Drupal::routeMatch()->getParameters()->get('webform');

  // Set taxonomy term as variable for template.
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    $variables['taxonomy_term'] = TRUE;
  }

  // Set node as and Node object to templates when viewing revisions.
  if (
    isset($variables['node']) &&
    is_numeric($variables['node']) &&
    !$variables['node'] instanceof Node
  ) {
    $variables['node'] = Node::load($variables['node']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_region(&$variables) {
  if ($variables['region'] !== 'before_content') {
    return;
  }

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Retrieve the node object for revisions.
    $node = (is_numeric($node) && !$node instanceof Node) ? Node::load($node) : $node;
    if (
      $node->getType() == 'landing_page' &&
      $node->hasField('field_hero') &&
      $node->hasField('field_hero_checkbox')
    ) {
      if (boolval($node->get('field_hero_checkbox')->getString())) {
        $variables['hero'] = $node->get('field_hero')->view();
      }
    }
  }
  if ($group = \Drupal::routeMatch()->getParameter('group')) {
    $fields = [
      'field_group_short_description',
      'field_group_image',
      'label',
      'field_group_link_cta',
    ];

    foreach ($fields as $field) {
      if ($group->hasField($field)) {
        if ($field == 'field_group_image') {
          $file_uri = $group->field_group_image->entity->getFileUri();
          if (!empty($file_uri)) {
            $group_hero['background_image'] = ImageStyle::load('7_2_full_hd')->buildUrl($file_uri);
          }
        }
        else {
          $group_hero[$field] = $group->get($field)->view();
        }
      }
    }

    if (!empty($group_hero)) {
      $variables['group_hero'] = $group_hero;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function suomidigi_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Retrieve the node object for revisions.
    $node = (is_numeric($node) && !$node instanceof Node) ? Node::load($node) : $node;
    $suggestions[] = 'page__' . $node->bundle();
  }

  if ($taxonomy_term = \Drupal::routeMatch()->getParameter('taxonomy_term')) {
    $suggestions[] = 'page__taxonomy__term__' . $taxonomy_term->bundle();
  }

  $request = \Drupal::request();

  if ($exception = $request->attributes->get('exception')) {
    $status_code = $exception->getStatusCode();
    if (in_array($status_code, [401, 403, 404])) {
      $suggestions[] = 'page__' . $status_code;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($node->hasField('published_at')) {
    $published_at = $node->get('published_at')->getString();
  }

  if (isset($published_at) && $node->isPublished()) {
    $variables['published_at'] = $published_at;
  }

  if (
    $node->getType() === 'article' ||
    $node->getType() === 'blog_post' ||
    $node->getType() === 'page' ||
    $node->getType() === 'news_item' ||
    $node->getType() === 'legislation_collection_page'
  ) {
    if ($node->hasField('field_header_image')) {
      $mediaEntity = $node->get('field_header_image')->getString();

      if (!empty($mediaEntity)) {
        $field_media = Media::load($mediaEntity);
        $mediaImage = $field_media->get('field_media_image')->first();

        if (!empty($mediaImage)) {
          /** @var \Drupal\Core\Entity\Plugin\DataType\EntityReference $entity */
          $entity = $mediaImage->get('entity');
          $target = $entity->getTarget();
          if ($target) {
            /** @var \Drupal\Core\Field\FieldItemList $uri */
            $uri = $target->get('uri');
            $image_uri = $uri->first()->getValue();

            if (is_array($image_uri) && array_key_exists('value', $image_uri)) {
              $variables['big_liftup_teaser_image'] = $image_uri['value'];
              $variables['is_full_width'] = drupal_static(
                'article_full_width_' . $node->id(),
                FALSE
              );
              $variables['big_liftup_teaser_image_alt'] = $mediaImage->get('alt')->getValue();
              $variables['big_liftup_teaser_image_title'] = $mediaImage->get('title')->getValue();

              // Override full width value for taxonomy term views.
              if (isset($variables['view'])) {
                $variables['is_full_width'] = in_array(
                  $variables['view']->id(),
                  [
                    'theme_tag_lists',
                    'taxonomy_term',
                  ]
                ) ? TRUE : FALSE;
              }
            }
          }
        }
      }
    }
  }

  // Get community domain values and set them as variables for the template.
  if (
    $node->getType() === 'community' &&
    $node->hasField('field_community_domain')
  ) {
    $current_language = Drupal::languageManager()->getCurrentLanguage()->getId();
    $community_domain_id = $node->field_community_domain->target_id;

    $domain = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->load($community_domain_id);

    if ($domain->hasTranslation($current_language)) {
      $domain = $domain->getTranslation($current_language);
    }

    if ($domain->hasField('field_community_domain_logo')) {
      $image_target = $domain->get('field_community_domain_logo')->first();

      if (!empty($image_target)) {
        $image_id = $image_target->get('target_id')->getValue();
        $variables['community_domain_logo'] = $image_id;
        $variables['community_domain_logo_alt'] = $image_target->get('alt')->getValue();
        $variables['community_domain_logo_title'] = $image_target->get('title')->getValue();
      }
    }

    $variables['community_domain_label'] = $domain->label();
    $variables['community_domain_domain'] = $domain->field_community_domain_domain->value;
  }

  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('flag')) {
    $flag_link = [
      '#lazy_builder' => [
        'flag.link_builder:build',
        [
          $node->getEntityTypeId(),
          $node->id(),
          'content_bookmark',
        ],
      ],
      '#create_placeholder' => TRUE,
    ];
    $variables['flag_link'] = render($flag_link);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * {@inheritdoc}
 */
function suomidigi_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  switch ($paragraph->getType()) {
    case 'liftup_entity_reference':
      if ($paragraph->hasField('field_p_liftup_style')) {
        $variables['liftup_style'] = $paragraph->field_p_liftup_style->value;
      }
      break;

    case 'liftup_entity_reference_item':
      // Check if parent paragraph is 3 columns.
      if ($parent = $paragraph->getParentEntity()) {
        if (
          $parent->hasField('field_p_liftup_style') &&
          $parent->get('field_p_liftup_style')->value == '3col'
        ) {
          // Set the first item full width.
          $first_target = $parent->get('field_p_content_unlimited')->first()->getValue()['target_id'];
          if ($paragraph->id() == $first_target) {
            $variables['is_full_width'] = TRUE;
            continue;
          }
        }
      }

      if ($paragraph->hasField('field_p_full_width')) {
        $fullWidthValue = (int) $paragraph->get('field_p_full_width')->getString();
        $fullWidth = $fullWidthValue === 1 ? TRUE : FALSE;
        $variables['is_full_width'] = $fullWidth;
      }

      if ($paragraph->hasField('field_p_entity_reference')) {
        $targetID = $paragraph->get('field_p_entity_reference')->getString();
        $is_full_width = &drupal_static('article_full_width_' . $targetID, FALSE);

        if (isset($fullWidth) && $fullWidth) {
          $is_full_width = TRUE;
        }
      }
      break;

    case 'legislation_attachment':
      if ($paragraph->hasField('field_legislation_attachment')) {
        /** @var \Drupal\file\Entity\File $file */
        $file = $paragraph->get('field_legislation_attachment')->entity;
        $path = $file->getFileUri();

        if ($path) {
          $variables['file_extension'] = pathinfo($path, PATHINFO_EXTENSION);
          $variables['file_size'] = format_size($file->getSize());
          $variables['file_url'] = $path;
        }
      }

      if ($paragraph->hasField('field_legislation_colour')) {
        $variables['legislation_colour'] = $paragraph->get('field_legislation_colour')->value;
      }

      break;

    case 'hero':
      if ($paragraph->hasField('field_hero_background_image')) {
        $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
        $media_id = $paragraph->get('field_hero_background_image')->first()->target_id;
        if (!empty($media_id)) {
          $media = Media::load($media_id);
          $variables['hero_background_image'] = ImageStyle::load('7_2_full_hd')->buildUrl($media->field_media_image->entity->getFileUri());

          if ($variables['is_front']) {
            $variables['hero_background_image'] = $media->field_media_image->entity->getFileUri();
          }
        }
      }
      break;

    case 'highlight_bullet_point_item':
      if (
        $paragraph->hasField('field_p_bullet_point_style') &&
        !empty($paragraph->get('field_p_bullet_point_style')->getString())
      ) {
        $variables['bullet_style'] = $paragraph->get('field_p_bullet_point_style')->getString();
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_page_title(&$variables) {
  // Replace taxonomy term page title to correspond taxonomy term plural
  // name, if one exists. Otherwise use taxonomy term name.
  $term = Drupal::request()->attributes->get('taxonomy_term');
  if (!empty($term) && $term->hasField('field_plural_name')) {
    $translated_title = Drupal::service('entity.repository')->getTranslationFromContext($term)->field_plural_name->value;

    if (!empty($translated_title)) {
      $variables['title'] = Markup::create($translated_title);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_block(&$variables) {
  if (isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block_id'] = $variables['elements']['#id'];
  }

  if ($variables['plugin_id'] == 'page_title_block') {
    $term = Drupal::request()->attributes->get('taxonomy_term');
    if (!empty($term)) {
      if ($term->bundle() == 'theme') {
        if ($term->hasField('field_liftup_image') && !$term->get('field_liftup_image')->isEmpty()) {
          $media_id = $term->get('field_liftup_image')->first()->getValue()['target_id'];
          $media = Media::load($media_id);
          $build = Drupal::entityTypeManager()->getViewBuilder('media')->view($media, 'theme_teaser_liftup');
          $variables['content']['field_liftup_image'] = $build;
        }
      }

      // Replace taxonomy term page title to correspond taxonomy term plural
      // name, if one exists. Otherwise use taxonomy term name.
      if ($term->hasField('field_plural_name')) {
        $translated_title = Drupal::service('entity.repository')->getTranslationFromContext($term)->field_plural_name->value;

        if (!empty($translated_title)) {
          $variables['content']['#title'] = Markup::create($translated_title);
        }
      }

      // Hide block from following taxonomies.
      if ($term->bundle() == 'author') {
        $variables['hide_block'] = TRUE;
      }
    }

    // Hide block from following content types.
    // Todo: Fix the hide block, when layouts are finalized.
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      // Retrieve the node object for revisions.
      $node = (is_numeric($node) && !$node instanceof Node) ? Node::load($node) : $node;

      if (
        $node->getType() == 'article' ||
        $node->getType() == 'event' ||
        $node->getType() == 'page' ||
        $node->getType() == 'webform' ||
        $node->getType() == 'legislation_collection_page' ||
        $node->getType() == 'blog_post' ||
        $node->getType() == 'core_content' ||
        $node->getType() == 'news_item' ||
        $node->getType() == 'community'
      ) {
        $variables['hide_block'] = TRUE;
      }

      // Hide block if current node is front page.
      if (
        $node->getType() == 'landing_page' &&
        $node->hasField('field_hero') &&
        $node->hasField('field_hero_checkbox')
      ) {
        if (boolval($node->get('field_hero_checkbox')->getString())) {
          $variables['hide_block'] = TRUE;
        }
      }
    }

    // Hide title from user profile page.
    if (\Drupal::routeMatch()->getRouteName() == 'entity.user.canonical') {
      $variables['hide_block'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_field(&$variables) {
  if ($variables['field_name'] !== 'field_list_of_links_link') {
    return;
  }

  foreach ($variables['items'] as &$item) {
    $item['is_external'] = $item['content']['#url']->isExternal();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function suomidigi_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    $suggestions[] = 'block__' . $variables['elements']['content']['#block_content']->bundle();
  }

  if (
    isset($variables['elements']['#configuration']['context_id']) &&
    $variables['elements']['#configuration']['context_id'] == 'sidebar'
  ) {
    $suggestions[] = 'block__menu_sidebar';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function suomidigi_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  if (
    isset($variables['view']) &&
    !empty($variables['view']->id())
  ) {
    $suggestions[] = 'view__' . $variables['view']->id();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function suomidigi_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables) {
  if (isset($variables['view'])) {
    $view = $variables['view'];

    if (!empty($view->id())) {
      $suggestions[] = 'views_view_unformatted__' . $view->id();

      if (!empty($view->getDisplay()->display['id'])) {
        $suggestions[] = 'views_view_unformatted__' . $view->id() . '__' . $view->getDisplay()->display['id'];
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function suomidigi_preprocess_menu(&$variables) {
  if (
    isset($variables['attributes']['block_id']) &&
    $variables['attributes']['block_id'] == 'menu_sidebar'
  ) {

    // Remove obsolete menu items from sidebar.
    foreach ($variables['items'] as $key => $item) {
      if (!$item['in_active_trail']) {
        unset($variables['items'][$key]);
      }
    }
  }

  // Add icons to account menu.
  if (
    isset($variables['attributes']['block_id']) &&
    $variables['attributes']['block_id'] == 'account_menu'
  ) {
    $icons = [
      'user.page' => 'user',
    ];

    if ($variables['logged_in']) {
      $icons['user.logout'] = 'logout';
      $variables['#attached']['library'][] = 'suomidigi/account-menu';
    }
    else {
      $icons['user.logout'] = 'user';
    }

    foreach ($variables['items'] as $key => $item) {
      if (array_key_exists($key, $icons)) {
        $variables['items'][$key]['icon'] = $icons[$key];
      }
    }

    // Set user real name or display name as variable for the template.
    $user = User::load(Drupal::currentUser()->id());
    if ($user->hasField('field_first_name') && !$user->field_first_name->isEmpty()) {
      $first_name = $user->field_first_name->value;

      if ($user->hasField('field_last_name') && !$user->field_last_name->isEmpty()) {
        $last_name = $user->field_last_name->value;
      }
    }

    // Set user image for the template.
    $variables = _suomidigi_set_profile_variables($variables, $user);

    $variables['user_name'] = (isset($first_name) && isset($last_name))
      ? $first_name . ' ' . $last_name
      : $user->getDisplayName();
  }
}

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the Telia icons SVG or null.
 */
function suomidigi_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    global $base_secure_url;
    $icon_path = $base_secure_url . '/' . drupal_get_path('theme', 'suomidigi') . '/icons/icons.svg';

    if (!empty($icon_path)) {
      // Add icons path as a global variable.
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Provide block based menu suggestions.
 */
function suomidigi_theme_suggestions_menu_alter(&$suggestions, $variables) {
  if (isset($variables['attributes']['block_id'])) {
    switch ($variables['attributes']['block_id']) {
      case 'menu_desktop':
        $suggestions[] = 'menu__desktop';
        break;

      case 'menu_mobile':
        $suggestions[] = 'menu__mobile';
        break;

      case 'menu_sidebar':
        $suggestions[] = 'menu__sidebar';
        break;

      default:
        $suggestions[] = 'menu__' . $variables['attributes']['block_id'];
        break;
    }
  }
  elseif ($variables['menu_name'] == 'main') {
    $suggestions[] = 'menu__sidebar';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Create custom theme suggestions for taxonomy term teaser.
 *
 * {@inheritdoc}
 */
function suomidigi_theme_suggestions_taxonomy_term_alter(&$suggestions, $variables) {
  $element = $variables['elements'];

  if ($element['#view_mode'] !== 'teaser') {
    return;
  }

  $suggestions[] = 'taxonomy_term__' . $element['#taxonomy_term']->bundle() . '__' . $element['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_taxonomy_term(&$variables) {
  $element = $variables['elements'];

  if ($element['#taxonomy_term']->bundle() == 'theme') {
    $current_path = Drupal::service('path.current')->getPath();
    $result = Drupal::service('path.alias_manager')->getAliasByPath($current_path);

    if ($variables['url'] == $result) {
      $variables['term_url_is_active'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Make article images full width when viewing them in taxonomy term lists.
 */
function suomidigi_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  if (
    ($view->id() == 'taxonomy_term' && $view->current_display == 'page_1') ||
    $view->id() == 'theme_tag_communities' ||
    $view->id() == 'theme_tag_lists'
  ) {
    $variables['attributes']['class'][] = 'theme-term__list';
    $row_style_plugin = &$variables['rows'][0]['#view']->style_plugin;
    $row_style_plugin->options['row_class'] = 'theme-term__list-item';
    foreach ($view->result as $result) {
      if (isset($result->nid)) {
        $is_full_width = &drupal_static('article_full_width_' . $result->nid, FALSE);
        $is_full_width = TRUE;
      }
    }
  }

  if ($view->id() == 'search') {
    $variables['searchInputValue'] = $view->exposed_raw_input['query'];
    $variables['searchResultCount'] = $view->total_rows;
  }

  // Set classes for blogs and articles view.
  $view_ids = [
    'blogs',
    'articles',
    'profile_own_content',
    'profile_my_bookmarks',
    'related_content',
  ];

  if (in_array($view->id(), $view_ids)) {
    if (
      $view->getDisplay()->isPagerEnabled() &&
      !empty($variables['rows'])
    ) {
      $pager = $view->getPager();
      if ($pager && $pager instanceof InfiniteScroll) {
        $variables['rows']['#theme_wrappers']['container']['#attributes']['class'][] = 'listing--grid';

        if ($view->id() == 'blogs') {
          $variables['pager']['#options']['button_text'] = t(
            'Show more blog posts'
          );
        }
      }
    }
  }

  // Set wrapper classes for selected views.
  $view_ids = [
    'group_content',
    'groups',
  ];

  if (in_array($view->id(), $view_ids)) {
    $variables['rows']['#theme_wrappers']['container']['#attributes']['class'][] = 'listing--list';

    // Change pager button text per display.
    switch ($view->current_display) {
      case 'blog_posts':
        $variables['pager']['#options']['button_text'] = t('Show more blog posts');
        break;

      case 'events':
        $variables['pager']['#options']['button_text'] = t('Show more events');
        break;
    }
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * {@inheritDoc}
 */
function suomidigi_views_pre_render(ViewExecutable &$view) {
  if ($view->id() === 'taxonomy_term') {
    if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
      $term_id = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
      $term = Term::load($term_id);

      // Sort view listing according to published time
      // if node is sticky on top of lists -> is not going to stick.
      if ($term->bundle() === 'tags') {
        usort($view->result, function ($a, $b) {
          return $b->node_field_data_published_at - $a->node_field_data_published_at;
        });
      }

      // Empty the current view results if there are view paragraphs
      // added to the current page.
      if ($term->bundle() === 'theme' && $term->hasField('field_paragraphs')) {
        $p = $term->field_paragraphs->first()->getValue();
        if (is_array($p)) {
          $paragraph = Paragraph::load($p['target_id']);
          if ($paragraph->bundle() === 'view') {
            $view->result = [];
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_media(&$variables) {
  $media = $variables['media'];

  switch ($media->bundle()) {
    case 'attachment':
      if ($media->hasField('field_media_file')) {
        /** @var \Drupal\file\Entity\File $file */
        $file = $media->get('field_media_file')->entity;
        $path = $file->getFileUri();

        if ($path) {
          $variables['file_extension'] = pathinfo($path, PATHINFO_EXTENSION);
          $variables['file_size'] = format_size($file->getSize());
          $variables['file_url'] = $path;
        }
      }
      break;

    case 'attachment_external':
      $file_data = $media->getSource()->getFileMetadata($media);
      if (is_array($file_data) && !empty($file_data)) {
        $variables['file_size'] = format_size($file_data['file_size']);
        $variables['file_extension'] = $file_data['file_type'];
        $variables['file_url'] = $file_data['file_url'];
      }
      break;

    default:
      return;
  }
}

/**
 * Implements hook_form_alter().
 */
function suomidigi_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (
    $form_id === 'views_exposed_form' &&
    $form['#id'] === 'views-exposed-form-search-search-api-view'
  ) {
    $form['#id'] = 'search_form';
    $form['query']['#attributes']['placeholder'] = t('Search from Suomidigi');
    $form['query']['#attributes']['id'] = 'search';
    $form['query']['#attributes']['class'][] = 'search-form__input';
    $form['#attributes']['class'][] = 'search-form';
    $form['actions']['submit']['#attributes']['data-twig-suggestion'] = 'search_form_submit';
    $form['actions']['submit']['#attributes']['class'][] = 'search-form__button';
    // Remove form-item wrapper from input and button.
    $form['query']['#theme_wrappers'] = [];
    $form['actions']['#theme_wrappers'] = [];
  }
}

/**
 * Implements hook_theme_suggestions_input_alter().
 */
function suomidigi_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-twig-suggestion'];
  }

  if (isset($element['#attributes']['id'])) {
    $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['id'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function suomidigi_theme_suggestions_user_alter(&$suggestions, array $variables) {
  $suggestions[] = 'user__' . $variables['elements']['#view_mode'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_image(&$variables) {
  // Convert double double quotes to empty string for image alt-texts.
  if (
    isset($variables['alt']) &&
    $variables['alt'] === '""'
  ) {
    $variables['attributes']['alt'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_pager(&$variables) {
  // Cast current to be INT instead of FLOAT.
  $variables['current'] = isset($variables['current']) ? (int) $variables['current'] : 1;

  // Check for last pager item href link.
  if (!empty($variables['items']['last']['href'])) {
    $splittedLink = explode("page=", $variables['items']['last']['href'])[1];
    $variables['pagesTotalAmount'] = (int) $splittedLink + 1;
  }
  else {
    if (!empty($variables['items']['pages'])) {
      $lastArrayItem = end($variables['items']['pages'])['href'];
      $splittedLink = explode("page=", $lastArrayItem)[1];
      $variables['pagesTotalAmount'] = (int) $splittedLink + 1;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_input__textfield(&$variables) {
  if ($variables['attributes']['id'] == 'search') {
    $variables['attributes']['aria-label'] = t('Search');
  }
}

/**
 * Implements hook_preprocess_HOOK() for rate-template-yes_no.html.twig.
 */
function suomidigi_preprocess_rate_template_yesno(&$variables) {
  $undo_link_class = 'rate__undo';
  if ($variables['use_ajax']) {
    $undo_link_class .= ' use-ajax';
  }
  if ($variables['has_voted']) {
    $undo_url = Url::fromRoute('rate.undo_vote', [
      'entity_type_id' => $variables['entity_type_id'],
      'entity_id' => $variables['entity_id'],
      'widget_type' => $variables['widget_type'],
      'destination' => \Drupal::destination()->getAsArray()['destination'],
    ]);
    $variables['undo_url'] = $undo_url->toString();
    $variables['undo_classes'] = $undo_link_class;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_comment__field_comments(&$variables) {
  $user = $variables['user_picture']['#user'];
  $comment = $variables['comment'];

  $variables = _suomidigi_set_profile_variables($variables, $user);

  if (!$comment->created->isEmpty()) {
    $variables['comment_created'] = Drupal::service('date.formatter')->format($comment->created->value, 'date_time');

    if (
      !$comment->changed->isEmpty() &&
      $comment->changed->value !== $comment->created->value
    ) {
      $variables['comment_changed'] = Drupal::service('date.formatter')->format($comment->changed->value, 'date_time');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_group(&$variables) {
  $variables['group_url'] = $variables['group']->toUrl()->toString();
  $variables['group_changed'] = $variables['group']->changed->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suomidigi_preprocess_form(&$variables) {
  if (isset($variables['element']['#id']) && $variables['element']['#id'] == 'comment-form') {
    $user = User::load(\Drupal::currentUser()->id());
    $variables = _suomidigi_set_profile_variables($variables, $user);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function suomidigi_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#id'])) {
    $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function suomidigi_theme_suggestions_textarea_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if (strpos($element['#id'], 'edit-comment-body-') === 0) {
    $suggestions[] = 'textarea__comment_body';
  }
}

/**
 * Helper function to set user profile variables for a template.
 *
 * @param array $variables
 *   Variables for the field or form.
 * @param object $user
 *   User object.
 *
 * @return array
 *   Returns variables.
 */
function _suomidigi_set_profile_variables(array $variables, $user) {
  if (!$user->user_picture->isEmpty()) {
    $variables['avatar'] = $user->user_picture->view('medium');
  }

  if ($user->hasField('field_first_name') && !$user->field_first_name->isEmpty()) {
    $variables['first_name'] = $user->field_first_name->value;
    $variables['avatar_abbreviation'] = $user->field_first_name->value;
  }
  else {
    $variables['avatar_abbreviation'] = $user->name->value;
  }

  if ($user->hasField('field_last_name') && !$user->field_last_name->isEmpty()) {
    $variables['last_name'] = $user->field_last_name->value;
  }

  return $variables;
}
