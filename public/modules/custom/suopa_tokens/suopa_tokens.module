<?php

/**
 * @file
 * Contains suopa_tokens.module.
 */

use Drupal\group\Entity\GroupContent;
use Drupal\node\Entity\Node;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_token_info().
 */
function suopa_tokens_token_info() {
  $info = [];

  $info['tokens']['node']['article_type_pattern'] = [
    'name' => t('Pattern for article subtype'),
    'description' => t('Use the pattern defined in the selected "Article type" taxonomy term.'),
    'type' => 'pattern_path',
  ];

  $info['tokens']['node']['core_content_type_pattern'] = [
    'name' => t('Pattern for core content subtype'),
    'description' => t('Use the pattern defined in the selected "Core content type" taxonomy term.'),
    'type' => 'pattern_path',
  ];

  $info['tokens']['node']['group_content_pattern'] = [
    'name' => t('Pattern for group content actual node'),
    'description' => t('Use the pattern based on whether the node belongs to group or not.'),
    'type' => 'pattern_path',
  ];

  $info['types']['pattern_path'] = [
    'name' => t('Alias pattern'),
  ];

  $info['tokens']['pattern_path']['path'] = [
    'name' => t('Pattern path'),
    'description' => t('Use the pattern defined in the selected "Article type" or "Core content type" taxonomy term.'),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function suopa_tokens_tokens($type, $tokens, array $data = [], array $options = []) {
  $return = [];

  if ($type == 'entity' && !empty($data['entity']) && $data['entity_type'] == 'node') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'article_type_pattern:path':
          $pattern = suopa_tokens_get_node_pattern($data['entity']);

          // Use the default pattern if no pattern is found.
          if (!$pattern) {
            $pattern = '[node:menu-link:parents:join-path]/[node:title]';
          }

          $token = Drupal::token();
          $return[$original] = Markup::create($token->replace($pattern, ['node' => $data['entity']], $options));
          break;

        case 'core_content_type_pattern:path':
          $pattern = suopa_tokens_get_node_pattern($data['entity'], 'field_core_content_type');

          // Use the default pattern if no pattern is found.
          if (!$pattern) {
            $pattern = '[node:menu-link:parents:join-path]/[node:title]';
          }

          $token = Drupal::token();
          $return[$original] = Markup::create($token->replace($pattern, ['node' => $data['entity']], $options));
          break;

        case 'group_content_pattern:path':
          // Generate URL aliases for group page and group blog posts.
          $pattern = FALSE;
          $node = $data['entity'];
          $node_type = $node->getType();
          $lang_code = Drupal::service('language_manager')->getCurrentLanguage()->getId();

          switch ($node_type) {
            case 'page':
              $pattern = \Drupal::configFactory()->getEditable('pathauto.pattern.page')->get('pattern');
              break;

            case 'blog_post':
              $pattern = \Drupal::configFactory()->getEditable('pathauto.pattern.blog_post_' . $lang_code)->get('pattern');
              break;
          }

          // If there are multiple groups, return the first one in the list.
          if (!empty($groups = GroupContent::loadByEntity($node))) {
            $group_pattern = \Drupal::configFactory()->getEditable('pathauto.pattern.group_' . $lang_code)->get('pattern');
            $pattern_prefix = $pattern;
            $group_content = reset($groups);
            $group_prefix = $group_content->getGroup()->label();
            $group_prefix = \Drupal::service('pathauto.alias_cleaner')->cleanString($group_prefix);

            $pattern = $group_prefix . '/[node:title]';

            if ($node_type == 'blog_post') {
              $pattern = str_replace('/[node:title]', '/' . $group_prefix . '/[node:title]', $pattern_prefix);
            }

            if ($node_type == 'page') {
              $pattern = str_replace('/[group:title]', '/' . $group_prefix . '/[node:title]', $group_pattern);
            }
          }

          if ($pattern) {
            $token = Drupal::token();
            $return[$original] = Markup::create($token->replace($pattern, ['node' => $data['entity']], $options));
          }

          break;
      }
    }
  }

  return $return;
}

/**
 * Load the url pattern of an article type.
 *
 * @param Drupal\node\Entity\Node $node
 *   Node.
 * @param string $type
 *   Node type.
 *
 * @return string
 *   Returns url pattern.
 */
function suopa_tokens_get_node_pattern(Node $node, $type = 'field_article_type') {
  $langCode = Drupal::service('language_manager')->getCurrentLanguage()->getId();

  $nodeTypeTerm = $node->get($type)->entity;
  if ($nodeTypeTerm->hasTranslation($langCode)) {
    $nodeTypeTerm = $nodeTypeTerm->getTranslation($langCode);
  }

  return $nodeTypeTerm->get('field_url_pattern')->value;
}
