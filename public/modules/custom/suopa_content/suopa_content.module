<?php

/**
 * @file
 * Contains suopa_content.module.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Drupal\locale\SourceString;

/**
 * Implements hook_help().
 */
function suopa_content_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the suopa_content module.
    case 'help.page.suopa_content':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Performs alterations for Suomidigi content.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_language_switch_links_alter().
 *
 * Switch link title as desired.
 */
function suopa_content_language_switch_links_alter(array &$links, $type, $path) {
  $entity = suopa_content_get_route_entity();

  foreach ($links as $lang_code => &$link) {
    switch ($lang_code) {
      case 'en':
        $link['title'] = 'In English';
        break;

      case 'sv':
        $link['title'] = 'PÃ¥ svenska';
        break;

      case 'fi':
        $link['title'] = 'Suomeksi';
        break;
    }

    $link['#abbreviation'] = $lang_code;
    if ($entity && $entity instanceof ContentEntityInterface) {
      if (
        !$entity->hasTranslation($lang_code) ||
        (
          method_exists($entity->getTranslation($lang_code), 'isPublished') &&
          !$entity->getTranslation($lang_code)->isPublished()
        )
      ) {
        $link['#untranslated'] = TRUE;
      }
    }
  }
}

/**
 * Helper function to extract the entity for the supplied route.
 *
 * @return null|ContentEntityInterface
 *   Returns the found entity or null.
 */
function suopa_content_get_route_entity() {
  $route_match = \Drupal::routeMatch();
  // Entity will be found in the route parameters.
  if (($route = $route_match->getRouteObject()) && ($parameters = $route->getOption('parameters'))) {
    // Determine if the current route represents an entity.
    foreach ($parameters as $name => $options) {
      if (isset($options['type']) && strpos($options['type'], 'entity:') === 0) {
        $entity = $route_match->getParameter($name);
        if ($entity instanceof ContentEntityInterface && $entity->hasLinkTemplate('canonical')) {
          return $entity;
        }

        // Since entity was found, no need to iterate further.
        return NULL;
      }
    }
  }
}

/**
 * Implements hook_block_access().
 *
 * Hide content creation links block and own content block if user is not on
 * own account page.
 *
 * {@inheritDoc}
 */
function suopa_content_block_access(Block $block, $operation, AccountInterface $account) {
  if ($operation == 'view') {
    if (
      $block->getPluginId() === 'content_creation_links_block' ||
      $block->getPluginId() === 'views_block:profile_own_content-block_1' ||
      $block->getPluginId() === 'views_block:profile_my_bookmarks-block_1' ||
      $block->getPluginId() === 'views_block:profile_own_groups-block_1'
    ) {
      if (!empty($viewed_user = \Drupal::routeMatch()->getParameter('user'))) {
        return ($account->id() === $viewed_user->id())
          ? AccessResult::neutral()->addCacheableDependency($viewed_user->id())
          : AccessResult::forbidden()->addCacheableDependency($viewed_user->id());
      }
    }

    // Hide group operations from "join group" page.
    if (
      $block->getPluginId() === 'group_operations' &&
      \Drupal::routeMatch()->getRouteName() === 'entity.group.join'
    ) {
      return AccessResult::forbidden();
    }
  }
}

/**
 * This function stores/returns nids for the given category.
 *
 * Static storage of our excluded nids.
 *
 * @param string $cat
 *   A category given by the exclude plugin.
 * @param int $tid
 *   Taxonomy term, if available.
 * @param int $nid
 *   The nid to be excluded. Optional so the function just returns the category.
 *
 * @return array
 *   Always returns the given category.
 */
function _suopa_content_exclude_previous_entities($cat, $tid = NULL, $nid = NULL) {
  $cached = \Drupal::cache()->get('cache_tag_id__' . $tid);
  if ($cached) {
    $excludes = $cached->data;
  }

  // Add nid to be excluded in the current category.
  if (!empty($nid)) {
    $excludes[$cat][$nid] = $nid;
    \Drupal::cache()->set(
      'cache_tag_id__' . $tid,
      $excludes,
      Cache::PERMANENT,
      ['node:' . $nid]
    );
  }

  return !empty($excludes[$cat]) ? $excludes[$cat] : [];
}

/**
 * Implements hook_views_data_alter().
 */
function suopa_content_views_data_alter(&$data) {
  $data['node']['views_exclude_previous'] = [
    'group' => t('Content'),
    'title' => t('Views Exclude Previous'),
    'help' => t('Excludes nodes that have already been loaded/viewed in the current page.'),
    'filter' => ['id' => 'views_exclude_previous'],
  ];

  // Override taxonomy term field reference to user profile argument handler.
  if (isset($data['taxonomy_term__field_reference_to_user_profile'])) {
    $field_term = $data['taxonomy_term__field_reference_to_user_profile']['field_reference_to_user_profile_target_id'];
    $field_term['argument']['id'] = 'views_author_term_argument';

    $data['taxonomy_term__field_reference_to_user_profile']['field_reference_to_user_profile_target_id'] = [
      'group' => $field_term['group'],
      'title' => t('Filter content with Author term reference'),
      'title short' => t('Author term reference'),
      'help' => t('This filter will look for author term reference and then filter the content withe this reference.'),
      'argument' => $field_term['argument'],
    ];
  }
}

/**
 * Implements hook_views_post_execute().
 */
function suopa_content_views_post_execute(ViewExecutable $view) {
  $views = [
    'theme_tag_lists',
    'theme_tag_communities',
  ];

  if (
    in_array('node_field_data', array_keys($view->getBaseTables())) &&
    in_array($view->id(), $views)
  ) {
    $term_id = 0;

    if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
      $term_id = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
    }

    foreach ($view->result as $result) {
      if (!empty($result->nid)) {
        _suopa_content_exclude_previous_entities('views', $term_id, $result->nid);
      }
    }
  }

  // Hide profile page views if current user is not route context user.
  if (
    $view->id() == 'profile_own_content' ||
    $view->id() == 'profile_my_bookmarks'
  ) {
    $route = \Drupal::routeMatch();
    if ($route->getRouteName() == 'entity.user.canonical') {
      $user_from_route = $route->getParameter('user');
      if ($user_from_route) {
        $user = \Drupal::currentUser()->id();

        if ($user_from_route->id() != $user) {
          $view->build_info['fail'] = TRUE;
        }
      }
    }
  }

  // Hide profile page views if no results are found or change the view title
  // based on who is browsing the page.
  if ($view->id() == 'profile_own_groups') {
    $route = \Drupal::routeMatch();
    if ($route->getRouteName() == 'entity.user.canonical') {
      $user_from_route = $route->getParameter('user');
      if ($user_from_route) {
        $user = \Drupal::currentUser()->id();

        if ($user_from_route->id() != $user) {
          $view->setTitle(t('Groups which user belongs to'));
        }

        if (count($view->result) == 0) {
          $view->build_info['fail'] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function suopa_editorial_local_tasks_alter(&$local_tasks) {
  // Change user 'Edit' and 'View' local tasks to 'Edit profile' and
  // 'View profile' when in user page.
  $local_tasks['entity.user.canonical']['title'] = new TranslatableMarkup('View profile');
  $local_tasks['entity.user.edit_form']['title'] = new TranslatableMarkup('Edit profile');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function suopa_editorial_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();

  if (
    $route_name == 'entity.user.canonical' ||
    $route_name == 'entity.user.edit_form'
  ) {
    $variables['#attached']['library'][] = 'suopa_content/local-tasks';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function suopa_editorial_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $form['name']['#title'] = t('Email');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function suopa_editorial_theme_suggestions_captcha_alter(array &$suggestions, array $variables) {
  if (isset($variables['element']['#captcha_info']['form_id'])) {
    $suggestions[] = 'captcha__user_register_form';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function suopa_content_node_view(&$build, $entity, $display, $view_mode) {
  // Duplicate displayed author field for rendering it in the footer of the page
  // with different view mode.
  if ($view_mode == 'full' && isset($build['field_displayed_author']['#items'])) {
    $build['field_displayed_author_footer'] = $build['field_displayed_author']['#items']->view([
      'type' => 'entity_reference_entity_view',
    ]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function suopa_content_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if (
    $form['#id'] == 'views-exposed-form-profile-own-content-block-1' ||
    $form['#id'] == 'views-exposed-form-profile-my-bookmarks-block-1'
  ) {

    // Prepare the views exposed filters for conversion to links.
    $index = 0;
    $items = [];

    foreach ($form['type']['#options'] as $tid => $term_name) {
      $items[$index]['#markup'] = ($tid == 'All')
        ? '<div class="button button--secondary"><a href="" class="is-active" id="' . $tid . '">' . $term_name . '</a></div>'
        : '<div class="button button--secondary"><a href="" id="' . $tid . '">' . $term_name . '</a></div>';
      $index++;
    }

    $form['links'] = [
      '#theme' => 'suopa_content_buttons',
      '#items' => $items,
      '#attributes' => ['class' => ['buttons', 'buttons--horizontal']],
    ];

    $form['#attached']['library'][] = 'suopa_content/exposed-filters';
  }
}

/**
 * Implements hook_views_pre_view().
 *
 * Go around the core bug. https://www.drupal.org/project/drupal/issues/2810823.
 */
function suopa_content_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if (
    ($view->id() == 'theme_information_for_articles') ||
    ($view->id() == 'articles' && $display_id == 'articles_attachment')
  ) {
    $input = $view->getExposedInput();
    if (array_key_exists('thid', $input)) {
      if (!empty($input['thid'])) {
        if ($input['thid'] === 'All' && $display_id == 'articles_attachment') {
          $input['thid'] = 'all';
        }
        $args[] = $input['thid'];
        if ($input['thid'] === 'All' && $display_id !== 'articles_attachment') {
          $args = [];
        }
      }
    }
    elseif (empty($input) && $display_id == 'articles_attachment') {
      $args[] = 'all';
    }
    elseif (empty($input) && $display_id != 'articles_attachment') {
      $args = [];
    }
  }
}

/**
 * Helper function to manually add a single translation string.
 *
 * @param string $source_string
 *   Source string.
 * @param string $langcode
 *   The langcode.
 * @param string $translated_string
 *   Translated string.
 *
 * @throws \Drupal\locale\StringStorageException
 */
function suopa_content_add_translation($source_string, $langcode, $translated_string) {
  // Find existing source string.
  $storage = \Drupal::service('locale.storage');
  $string = $storage->findString(['source' => $source_string]);
  if (is_null($string)) {
    $string = new SourceString();
    $string->setString($source_string);
    $string->setStorage($storage);
    $string->save();
  }
  // Create translation. If one already exists, it will be replaced.
  $translation = $storage->createTranslation([
    'lid' => $string->lid,
    'language' => $langcode,
    'translation' => $translated_string,
  ]);
  $translation->save();
}

/**
 * Implements hook_theme().
 */
function suopa_content_theme() {
  return [
    'suopa_content_buttons' => [
      'variables' => [
        'items' => NULL,
        'attributes' => NULL,
      ],
    ],
    'suopa_content_print_button' => [
      'variables' => [
        'button_title' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_views_pre_render().
 *
 * {@inheritDoc}
 */
function suopa_content_views_pre_render(ViewExecutable $view) {
  if (isset($view) && ($view->storage->id() == 'profile_my_bookmarks')) {
    $view->element['#attached']['library'][] = 'suopa_content/update-custom-view';
  }
}
