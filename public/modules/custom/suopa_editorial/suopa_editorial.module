<?php

/**
 * @file
 * Contains suopa_editorial.module.
 */

const ALLOWED_FORMS_PUBLISHING_INFORMATION = [
  'node_article_edit_form',
  'node_article_form',
  'node_blog_post_edit_form',
  'node_blog_post_form',
  'node_core_content_edit_form',
  'node_core_content_form',
  'node_legislation_card_edit_form',
  'node_legislation_card_form',
  'node_news_item_edit_form',
  'node_news_item_form',
  'node_page_edit_form',
  'node_page_form',
  'node_event_form',
  'node_event_edit_form',
];

const ALLOWED_FORMS_DRAG_N_DROP = [
  'node_article_edit_form',
  'node_article_form',
  'node_blog_post_edit_form',
  'node_blog_post_form',
  'node_core_content_edit_form',
  'node_core_content_form',
  'node_landing_page_edit_form',
  'node_landing_page_form',
  'node_legislation_card_edit_form',
  'node_legislation_card_form',
  'node_news_item_edit_form',
  'node_news_item_form',
  'node_page_edit_form',
  'node_page_form',
  'taxonomy_term_theme_form',
];

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\user\Entity\User;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function suopa_editorial_form_alter(&$form, $form_state) {
  suopa_editorial_modify_article_publishing_info($form, $form_state);
  suopa_editorial_enable_drag_and_drop($form, $form_state);
  suopa_editorial_disable_sibling_checkbox($form, $form_state);
  suopa_editorial_modify_taxonomy_term_forms($form, $form_state);
  suopa_editorial_hide_author_selection_for_specific_roles($form, $form_state);
}

/**
 * Modify publishing options in article node forms.
 *
 * Mainly move the publishing info fields to the right sidebar.
 *
 * {@inheritDoc}
 */
function suopa_editorial_modify_article_publishing_info(&$form, $form_state) {
  if (!in_array($form['#form_id'], ALLOWED_FORMS_PUBLISHING_INFORMATION)) {
    return;
  }

  if (isset($form['field_displayed_update_time'])) {
    $form['field_displayed_update_time']['#group'] = 'revision_information';
  }

  if (isset($form['field_displayed_author'])) {
    $form['field_displayed_author']['#group'] = 'revision_information';
  }

  if (isset($form['field_hide_updated_date'])) {
    $form['field_hide_updated_date']['#group'] = 'revision_information';
  }

  // Attach timepicker styles.
  $form['#attached']['library'][] = 'suopa_editorial/suopa-timepicker';
}

/**
 * Disable submit button.
 *
 * Disable submit button from landing page and article,
 * when paragraphs drag and drop is being used.
 *
 * {@inheritDoc}
 */
function suopa_editorial_enable_drag_and_drop(&$form, $form_state) {
  if (!in_array($form['#form_id'], ALLOWED_FORMS_DRAG_N_DROP)) {
    return;
  }

  $form['#attached']['library'][] = 'suopa_editorial/paragraph-drag-n-drop';
}

/**
 * Disable sibling checkbox if the current has been clicked.
 *
 * {@inheritDoc}
 */
function suopa_editorial_disable_sibling_checkbox(&$form, $form_state) {
  if (!in_array($form['#form_id'], ALLOWED_FORMS_DRAG_N_DROP)) {
    return;
  }

  $form['#attached']['library'][] = 'suopa_editorial/disable-sibling-checkbox';
}

/**
 * Implements hook_views_pre_render().
 *
 * Modify media entity browser image width to suit smaller screens.
 *
 * {@inheritDoc}
 */
function suopa_editorial_views_pre_render(ViewExecutable $view) {
  if (isset($view) && $view->id() === 'media_entity_browser') {
    $view->element['#attached']['library'][] = 'suopa_editorial/media-entity-browser';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add custom classes to input__checkbox.
 */
function suopa_editorial_preprocess_input__checkbox(&$variables) {
  if (!isset($variables['element']['#parents'])) {
    return;
  }

  $fields = [
    'field_p_small_image',
    'field_p_content_50_50',
  ];

  foreach ($fields as $field) {
    if (in_array($field, $variables['element']['#parents'], TRUE)) {
      $variables['attributes']['class'][] = 'is-disableable';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add custom classes to container.
 */
function suopa_editorial_preprocess_container(&$variables) {
  if (!isset($variables['element']['#parents'])) {
    return;
  }

  $fields = [
    'field--name-field-p-small-image',
    'field--name-field-p-content-50-50',
  ];

  foreach ($fields as $field) {
    if (
      isset($variables['attributes']['class']) &&
      is_array($variables['attributes']['class']) &&
      in_array($field, $variables['attributes']['class'])
    ) {
      $variables['attributes']['class'] = 'is-disableable--wrapper';
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Alter the datetime widget.
 */
function suopa_editorial_field_widget_form_alter(&$element, &$form_state, $context) {
  if (
    $context['widget']->getPluginId() == 'datetime_timestamp' ||
    $context['widget']->getPluginId() == 'datetime_timestamp_no_default' ||
    $context['widget']->getPluginId() == 'publication_date_timestamp'
  ) {
    /** @var \Drupal\Core\Field\WidgetInterface $widget */
    $library_info = timepicker_get_library('timepicker_jonthornton');

    // Attach callback library.
    $callback_library = $library_info['callback library'];
    $callback_library_name = str_replace('-', '_', $callback_library['name']);
    $element['#attached']['library'][] =
      "{$callback_library['extension']}/{$callback_library['name']}";

    // Attach js settings.
    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
    $items = $context['items'];
    $field_name = $items->getName();

    $element['#attached']['drupalSettings'][$callback_library['extension']][$callback_library_name][$field_name] = [
      'timeFormat' => 'H:i:s',
    ];
  }

  // Remove text format box from selected fields.
  $field_name = $context['items']->getFieldDefinition()->getName();
  $formats = [
    'comment_body' => ['plain_text'],
    'field_text' => [],
  ];

  if (array_key_exists($field_name, $formats)) {
    if (!empty($formats[$field_name])) {
      $element['#allowed_formats'] = $formats[$field_name];
    }
    $element['#after_build'][] = '_remove_text_format_box';
  }

  // Handle field alterations for authenticated user.
  $currentUser = \Drupal::currentUser();
  if (
    in_array('authenticated', $currentUser->getRoles()) &&
    count($currentUser->getRoles()) == 1 &&
    $currentUser->id() !== 1
  ) {
    // Convert field header image media entity browser to media image adder for
    // authenticated users.
    if (
      $field_name == 'field_header_image' ||
      $field_name == 'field_p_media'
    ) {
      $element['entity_browser']['#entity_browser'] = 'media_image_adder';
    }
  }
}

/**
 * After build callback for widget form alter.
 */
function _remove_text_format_box($form_element, FormStateInterface $form_state) {
  // Remove help, guidelines and wrappers.
  unset($form_element['format']['help']);
  unset($form_element['format']['guidelines']);
  unset($form_element['format']['#type']);
  unset($form_element['format']['#theme_wrappers']);

  return $form_element;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function suopa_editorial_field_widget_form_container_alter(&$element, &$form_state, $context) {
  $currentUser = \Drupal::currentUser();
  if (
    in_array('authenticated', $currentUser->getRoles()) &&
    count($currentUser->getRoles()) == 1 &&
    $currentUser->id() !== 1
  ) {
    // Show only text and image paragraphs for the authenticated user.
    if (
      $element['widget']['#field_name'] == 'field_paragraphs' &&
      isset($element['widget']['add_more']['operations']['#links'])
    ) {
      // Allowed paragraph types.
      $types = &$element['widget']['add_more']['operations']['#links'];
      $allowed_types = [
        'add_more_button_media',
        'add_more_button_text',
      ];

      foreach ($types as $paragraph_type => $paragraph) {
        if (strpos($paragraph_type, 'add_more_button') !== FALSE) {
          if (!in_array($paragraph_type, $allowed_types)) {
            unset($types[$paragraph_type]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function suopa_editorial_modify_taxonomy_term_forms(&$form, $form_state) {
  if (
    is_array($form['#theme']) &&
    in_array('taxonomy_term_form', $form['#theme'])
  ) {
    // Make taxonomy term add/edit form look like node edit form.
    $form['#theme'] = ['node_edit_form'];
    $form['#attached']['library'][] = 'seven/node-form';

    $form['advanced']['#type'] = 'container';
    $form['advanced']['#attributes']['class'][] = 'entity-meta';

    $form['entity-meta-header']['#type'] = 'container';
    $form['entity-meta-header']['#group'] = 'advanced';
    $form['entity-meta-header']['#attributes']['class'][] = 'entity-meta__header';

    $form['revision_log_message']['#group'] = 'entity-meta-header';
    $form['revision_log_message']['#weight'] = 100;

    // Alter fields.
    $form['path']['#group'] = 'url_alias';
    $form['relations']['#group'] = 'advanced';
    $form['relations']['#weight'] = 0;
    $form['relations']['#open'] = TRUE;
    $form['content_translation']['#weight'] = 0;
    $form['langcode']['#weight'] = 0;

    $form['url_alias'] = [
      '#type' => 'details',
      '#title' => t('URL alias'),
      '#open' => TRUE,
      '#group' => 'advanced',
      '#weight' => 0,
      '#optional' => TRUE,
      '#attributes' => [
        'class' => ['node-form-options'],
      ],
      '#attached' => [
        'library' => ['node/drupal.node'],
      ],
    ];

  }

  return $form;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function suopa_editorial_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $currentUser = \Drupal::currentUser();

  // Change the label for moderation state "review".
  if (isset($form['moderation_state'])) {
    $form['moderation_state']['widget'][0]['state']['#options']['review'] = t('Submit for publication');
  }

  if (isset($form['field_displayed_author'])) {
    if (
      in_array('editor_in_chief', $currentUser->getRoles()) ||
      in_array('administrator', $currentUser->getRoles())
    ) {
      $current_path = \Drupal::service('path.current')->getPath();
      $url = Url::fromRoute('entity.taxonomy_vocabulary.overview_form', [
        'taxonomy_vocabulary' => 'author',
        'destination' => $current_path,
      ]);
      $link = Link::fromTextAndUrl(t('Edit authors'), $url);
      $link = $link->toRenderable();
      $form['field_displayed_author']['#suffix'] = t('Complete the author information.') . ' ' . render($link) . '.';
    }
  }

  // Hide menu selection from node basic page.
  if (
    $form_id == 'node_page_edit_form' ||
    $form_id == 'node_page_form'
  ) {
    $user = User::load(\Drupal::currentUser()->id());

    if ($user->id() == 1) {
      return $form;
    }

    if (!$user->hasRole('editor_in_chief')) {
      $form['menu']['#access'] = FALSE;

      if (isset($form['field_hide_updated_date'])) {
        $form['field_hide_updated_date']['#access'] = FALSE;
      }
    }
  }

  // Hide hero paragraph from non EiC users.
  if (
    $form_id == 'node_landing_page_edit_form' ||
    $form_id == 'node_landing_page_form'
  ) {
    $form['field_hero']['#states'] = [
      'visible' => [
        ':input[name="field_hero_checkbox[value]"]' => ['checked' => TRUE],
      ],
    ];
    $user = User::load(\Drupal::currentUser()->id());

    if ($user->id() == 1) {
      return $form;
    }

    if (!$user->hasRole('editor_in_chief')) {
      $form['field_hero']['#access'] = FALSE;
      $form['field_hero_checkbox']['#access'] = FALSE;
    }
  }

  // Force user to choose the moderation state on blog post add form.
  if ($form_id == 'node_blog_post_form') {
    $state = &$form['moderation_state']['widget'][0]['state'];
    $state['#options']['a_select'] = t('Select');
    ksort($state['#options']);
    $state['#default_value'] = 'a_select';
    $state['#options_attributes']['a_select'] = TRUE;
    $state['#attached']['library'][] = 'suopa_editorial/force-select-on-moderation';
  }

  return $form;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * {@inheritdoc}
 */
function suopa_editorial_hide_author_selection_for_specific_roles(&$form, $form_state) {
  $currentUser = \Drupal::currentUser();

  // Add author taxonomy term automatically if user is not an editor in chief
  // or administrator.
  if (
    !in_array('editor_in_chief', $currentUser->getRoles()) &&
    !in_array('administrator', $currentUser->getRoles()) &&
    !in_array('group_administrator', $currentUser->getRoles()) &&
    array_key_exists('field_displayed_author', $form)
  ) {
    $user = User::load($currentUser->id());
    $author_service = \Drupal::service('suopa_editorial.apply_author');
    $author_id = $author_service->getAuthorReference($user);

    if ($author_id) {
      $author = Term::load($author_id);
      if ($author) {
        $form['meta']['author']['#markup'] = $author->label();
      }
      $form['field_displayed_author']['#disabled'] = TRUE;

      if (!in_array($author_id, $form['field_displayed_author']['widget']['#default_value'])) {
        $form['field_displayed_author']['widget']['#default_value'][] = $author_id;
      }

      // If authenticated user with no roles is viewing add/edit page,
      // hide revision information and advanced tabs.
      if (
        in_array('authenticated', $currentUser->getRoles()) &&
        count($currentUser->getRoles()) == 1 &&
        $currentUser->id() !== 1
      ) {
        $form['revision_information']['#access'] = FALSE;
      }
    }
  }

  return $form;
}

/**
 * Implements hook_node_access().
 *
 * Prevent users of deleting landing page if it is set as front page.
 */
function suopa_editorial_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ($op == 'delete') {
    if (
      $node->bundle() == 'landing_page' &&
      $node->hasField('field_hero_checkbox') &&
      $node->get('field_hero_checkbox')->value == 1
    ) {
      return AccessResult::forbidden();
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_group_operations_alter().
 */
function suopa_editorial_group_operations_alter(&$operations, $group, &$build) {
  $links = [];

  if (!$group->getMember(\Drupal::currentUser())) {
    $url = new Url('entity.group.join', ['group' => $group->id()]);
    $url->setOption('query', ['destination' => '/group/' . $group->id() . '/nodes']);
    $join = Link::fromTextAndUrl(t('Join group'), $url);
    $build['#content'] = $join->toRenderable();
    $build['#theme'] = 'content_creation_links_block';
    $build['#join'] = TRUE;
    return;
  }

  foreach ($operations as $link) {
    $links[] = Link::fromTextAndUrl($link['title'], $link['url']);
  }

  $build['#label'] = t('Create new content');
  $build['#content'] = [
    '#theme' => 'item_list',
    '#items' => $links,
    '#attributes' => ['class' => ['links']],
  ];

  $build['#theme'] = 'content_creation_links_block';
  $build['#attached']['library'][] = 'suopa_editorial/content-creation-links';
}

/**
 * Implements hook_theme().
 */
function suopa_editorial_theme() {
  return [
    'content_creation_links_block' => [
      'variables' => [
        'content' => NULL,
        'label' => NULL,
        'join' => FALSE,
      ],
      'render element' => 'children',
    ],
    'suopa_editorial__select__options_attributes' => [
      'render element' => 'element',
      'base hook' => 'select',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function suopa_editorial_theme_suggestions_select_alter(array &$suggestions, array $variables) {
  if (
    isset($variables['element']['#id']) &&
    $variables['element']['#id'] == 'edit-moderation-state-0-state'
  ) {
    array_push($suggestions, 'suopa_editorial__select__options_attributes');
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Show Button CTA link based on Separate media and text fields value on
 * Liftup 50/50 paragraph.
 */
function suopa_editorial_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {
  if ($element['#paragraph_type'] == 'liftup_50_50') {
    $name = 'input[name="field_paragraphs[' . $element['#delta'] . '][subform][field_p_separate][value]';
    $element['subform']['field_p_button_cta']['widget'][0]['#states'] = [
      'visible' => [
        $name => ['checked' => TRUE],
      ],
    ];
  }
}

/**
 * Implements hook_user_insert().
 *
 * Create or apply freshly created user account to corresponding author
 * taxonomy term.
 */
function suopa_editorial_user_insert($account) {
  $author_service = \Drupal::service('suopa_editorial.apply_author');
  $author_service->createReference($account);
}
